import { useEffect, useState } from "react";
import { supabase } from "./main";
console.log("üìå Stock bile≈üeni render edildi!");

const Stock = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const updateStock = async () => {
      setLoading(true);
      console.log("üîÑ Stok g√ºncelleme i≈ülemi ba≈üladƒ±...");

      // 1. Status ID'si 3 olan sipari≈üleri al
      const { data: orders, error: ordersError } = await supabase
        .from("orders")
        .select("id")
        .eq("status_id", 3);

      if (ordersError) {
        console.error("‚ùå Sipari≈üler √ßekilemedi:", ordersError.message);
        setLoading(false);
        return;
      }

      console.log("üì¶ Teslim edilen sipari≈üler:", orders);

      const orderIds = orders.map(order => order.id);
      if (orderIds.length === 0) {
        console.log("‚ö†Ô∏è Teslim edilen sipari≈ü yok.");
        setLoading(false);
        return;
      }

      // 2. order_details tablosundan sipari≈ülere ait product_id'leri √ßek
      const { data: orderDetails, error: orderDetailsError } = await supabase
        .from("order_details")
        .select("product_id")
        .in("order_id", orderIds);

      if (orderDetailsError) {
        console.error("‚ùå Sipari≈ü detaylarƒ± √ßekilemedi:", orderDetailsError.message);
        setLoading(false);
        return;
      }

      console.log("üì¶ Sipari≈ü detaylarƒ±ndan √ßekilen √ºr√ºn ID'leri:", orderDetails);

      const productIds = orderDetails.map(detail => detail.product_id);
      if (productIds.length === 0) {
        console.log("‚ö†Ô∏è Sipari≈ülerde √ºr√ºn yok.");
        setLoading(false);
        return;
      }

      // 3. Stoklarƒ± g√ºncelle
      for (const productId of productIds) {
        const { error: updateError } = await supabase
          .from("products")
          .update({ stock: supabase.raw("stock - 1") })
          .eq("id", productId);

        if (updateError) {
          console.error(`‚ùå √úr√ºn ID ${productId} stok g√ºncellenemedi:`, updateError.message);
        } else {
          console.log(`‚úÖ √úr√ºn ID ${productId} stok g√ºncellendi.`);
        }
      }

      // 4. G√ºncellenmi≈ü stok verisini tekrar √ßek ve state'e ata
      const { data: updatedProducts, error: productsError } = await supabase
        .from("products")
        .select("*");

      if (productsError) {
        console.error("‚ùå √úr√ºnler tekrar √ßekilemedi:", productsError.message);
      } else {
        console.log("üì¶ G√ºncellenmi≈ü √ºr√ºn listesi:", updatedProducts);
        setProducts(updatedProducts);
      }

      setLoading(false);
    };

    updateStock();
  }, []); // Sayfa y√ºklendiƒüinde sadece 1 kez √ßalƒ±≈üƒ±r

  return (
    <div>
      <h2>Stok Listesi</h2>
      {loading ? (
        <p>Y√ºkleniyor...</p>
      ) : (
        <>
          <button onClick={() => window.location.reload()}>Sayfayƒ± Yenile</button>
          <table border="1" cellPadding="10" style={{ borderCollapse: "collapse" }}>
            <thead>
              <tr>
                <th>ID</th>
                <th>√úr√ºn Adƒ±</th>
                <th>Stok</th>
              </tr>
            </thead>
            <tbody>
              {products.map(p => (
                <tr key={p.id}>
                  <td>{p.id}</td>
                  <td>{p.name}</td>
                  <td>{p.stock}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </>
      )}
    </div>
  );
};

export default Stock;
